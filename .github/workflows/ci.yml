name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 基本的なテスト
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pyyaml numpy
    
    - name: Run basic tests
      run: |
        python -m pytest tests/test_simple_simulation.py -v
        python -m pytest tests/test_manual_control.py -v
    
    - name: Check configuration files
      run: |
        python -c "
        import yaml
        import sys
        
        # drone_specs.yamlの確認
        with open('config/drone_specs.yaml', 'r') as f:
            drone_specs = yaml.safe_load(f)
        
        # 必須キーの確認
        required_keys = ['drone_specifications']
        for key in required_keys:
            if key not in drone_specs:
                print(f'ERROR: Missing required key: {key}')
                sys.exit(1)
        
        # action_sequences.yamlの確認
        with open('config/action_sequences.yaml', 'r') as f:
            action_sequences = yaml.safe_load(f)
        
        if 'action_sequences' not in action_sequences:
            print('ERROR: Missing action_sequences key')
            sys.exit(1)
        
        print('✅ Configuration files are valid')
        "

  # Docker環境でのテスト
  docker-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker build -f docker/Dockerfile.manual_control -t drone-manual-control:test .
    
    - name: Test Docker image
      run: |
        # Dockerイメージが正常にビルドされるかテスト
        docker run --rm drone-manual-control:test python -c "
        import sys
        print('✅ Docker image test passed')
        sys.exit(0)
        "

  # シミュレーション環境のテスト
  simulation-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up ROS 2 Humble
      uses: ros-tooling/setup-ros@v0.3
      with:
        required-ros-distributions: humble
    
    - name: Install ROS 2 dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-colcon-common-extensions
        sudo apt-get install -y ros-humble-geometry-msgs ros-humble-sensor-msgs
    
    - name: Build workspace
      run: |
        cd src/manual_control
        colcon build --packages-select manual_control
    
    - name: Test simulation components
      run: |
        cd src/manual_control
        source install/setup.sh
        
        # シミュレーターのインポートテスト
        python3 -c "
        import sys
        sys.path.append('manual_control')
        
        try:
            from simple_simulator import SimpleDroneSimulator
            from state_monitor import StateMonitorNode
            from action_executor import ActionExecutorNode
            print('✅ All simulation components imported successfully')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        "
    
    - name: Test configuration loading
      run: |
        cd src/manual_control
        source install/setup.sh
        
        python3 -c "
        import yaml
        import os
        
        # drone_specs.yamlの読み込みテスト
        config_path = os.path.join('../../config', 'drone_specs.yaml')
        with open(config_path, 'r') as f:
            drone_specs = yaml.safe_load(f)
        
        # 物理パラメータの確認
        specs = drone_specs['drone_specifications']
        mass = specs['physical']['weight']
        thrust_constant = specs['motors']['main_rotors']['thrust_constant']
        
        print(f'✅ Drone specs loaded: mass={mass}kg, thrust_constant={thrust_constant}')
        
        # action_sequences.yamlの読み込みテスト
        action_path = os.path.join('../../config', 'action_sequences.yaml')
        with open(action_path, 'r') as f:
            actions = yaml.safe_load(f)
        
        print(f'✅ Action sequences loaded: {len(actions[\"action_sequences\"])} actions')
        "

  # 統合テスト
  integration-test:
    runs-on: ubuntu-latest
    needs: [test, docker-test, simulation-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration.py -v
    
    - name: Test launch file syntax
      run: |
        cd src/manual_control
        python3 -c "
        import sys
        sys.path.append('launch')
        
        try:
            from simple_demo import generate_launch_description
            ld = generate_launch_description()
            print('✅ Launch file syntax is valid')
        except Exception as e:
            print(f'❌ Launch file error: {e}')
            sys.exit(1)
        "

  # レポート生成
  report:
    runs-on: ubuntu-latest
    needs: [test, docker-test, simulation-test, integration-test]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate test report
      run: |
        echo "## 🚁 Drone Manual Control CI Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Basic tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Docker tests: ${{ needs.docker-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Simulation tests: ${{ needs.simulation-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Integration tests: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Environment Status:" >> $GITHUB_STEP_SUMMARY
        echo "- Configuration files: Valid" >> $GITHUB_STEP_SUMMARY
        echo "- Simulation components: Ready" >> $GITHUB_STEP_SUMMARY
        echo "- Docker images: Built successfully" >> $GITHUB_STEP_SUMMARY 